require(MSGARCH)
data("sp500")
spec = create.spec(model = c("sGARCH", "sGARCH"),
distribution = c("norm", "norm"),
do.skew = c(FALSE, FALSE),
do.mix = FALSE, do.shape.ind = FALSE)
set.seed(123)
ctr.mle = list(do.init = TRUE, NP = 50*length(spec$theta0), itermax = 500, enhance.theta0 = TRUE)
fit.mle = MSGARCH::fit.mle(spec = spec, y = sp500, ctr = ctr.mle)
summary(fit.mle)
data("sp500")
spec = create.spec(model = c("sGARCH", "sGARCH"),
distribution = c("norm", "norm"),
do.skew = c(FALSE, FALSE),
do.mix = TRUE, do.shape.ind = FALSE)
set.seed(123)
ctr.mle = list(do.init = TRUE, NP = 50*length(spec$theta0), itermax = 500, enhance.theta0 = TRUE)
fit.mle = MSGARCH::fit.mle(spec = spec, y = sp500, ctr = ctr.mle)
summary(fit.mle)
data("sp500")
spec = create.spec(model = c("sGARCH", "sGARCH"),
distribution = c("std", "std"),
do.skew = c(FALSE, FALSE),
do.mix = FALSE, do.shape.ind = TRUE)
set.seed(123)
ctr.mle = list(do.init = FALSE, NP = 50*length(spec$theta0), itermax = 500, enhance.theta0 = TRUE)
fit.mle = MSGARCH::fit.mle(spec = spec, y = sp500, ctr = ctr.mle)
summary(fit.mle)
data("sp500")
spec = create.spec(model = c("sGARCH", "sGARCH"),
distribution = c("std", "std"),
do.skew = c(FALSE, FALSE),
do.mix = FALSE, do.shape.ind = TRUE)
set.seed(123)
ctr.mle = list(do.init = TRUE, NP = 50*length(spec$theta0), itermax = 500, enhance.theta0 = TRUE)
fit.mle = MSGARCH::fit.mle(spec = spec, y = sp500, ctr = ctr.mle)
summary(fit.mle)
data("sp500")
spec = create.spec(model = c("sGARCH", "sGARCH"),
distribution = c("norm", "norm"),
do.skew = c(FALSE, FALSE),
do.mix = FALSE, do.shape.ind = FALSE)
set.seed(123)
ctr.bay = list(N.burn = 10000, N.mcmc = 10000, N.thin = 10, enhance.theta0 = TRUE)
fit.bay = MSGARCH::fit.bayes(spec = spec, y = sp500, ctr = ctr.bay)
data("sp500")
spec = create.spec(model = c("sGARCH", "sGARCH"),
distribution = c("norm", "norm"),
do.skew = c(FALSE, FALSE),
do.mix = FALSE, do.shape.ind = FALSE)
set.seed(123)
ctr.bay = list(N.burn = 5000, N.mcmc = 10000, N.thin = 10, enhance.theta0 = TRUE)
fit.bay = MSGARCH::fit.bayes(spec = spec, y = sp500, ctr = ctr.bay)
summary(fit.bay)
tail(fit.bay$theta,5)
kern = kernel(fit.bay)
tail(kern,5)
require(MSGARCH)
data("AMZN")
spec1 = create.spec(model = c("gjrGARCH"),
distribution = c("std"),
do.skew = c(TRUE),
do.mix = FALSE, do.shape.ind = FALSE)
ctr.mle1 = list(do.init = TRUE, NP = 50*length(spec1$theta0), itermax = 500, enhance.theta0 = TRUE)
set.seed(123)
fit.mle1 = MSGARCH::fit.mle(spec = spec1, y = AMZN, ctr = ctr.mle1)
summary(fit.mle1)
ht = ht(fit.mle1)
plot(ht)
spec2 = create.spec(model = c("gjrGARCH", "gjrGARCH"),
distribution = c("std", "std"),
do.skew = c(TRUE, TRUE),
do.mix = FALSE, do.shape.ind = FALSE)
ctr.mle2 = list(do.init = TRUE, NP = 50*length(spec2$theta0), itermax = 500, enhance.theta0 = TRUE)
set.seed(123)
fit.mle2 = MSGARCH::fit.mle(spec = spec2, y = AMZN, ctr = ctr.mle2)
summary(fit.mle2)
state = Pstate(fit.mle2)
plot(state)
ctr.bay1 = list(N.burn = 5000, N.mcmc = 10000, N.thin = 10, theta0 = fit.mle1$theta)
set.seed(123)
fit.bay1 = MSGARCH::fit.bayes(spec = spec1, y = AMZN, ctr = ctr.bay1)
summary(fit.bay1)
ht = ht(fit.bay1)
plot(ht)
ctr.bay2 = list(N.burn = 5000, N.mcmc = 10000, N.thin = 10, theta0 = fit.mle2$theta)
set.seed(123)
fit.bay2 = MSGARCH::fit.bayes(spec = spec2, y = AMZN, ctr = ctr.bay2)
summary(fit.bay2)
state = Pstate(fit.bay2)
plot(state)
c(AIC(fit.mle1),AIC(fit.mle2))
c(BIC(fit.mle1),BIC(fit.mle2))
c(DIC(fit.bay1)$DIC,DIC(fit.bay2)$DIC)
plot(MSGARCH::pit(fit.mle1, do.norm = FALSE, do.its = TRUE))
plot(MSGARCH::pit(fit.mle2, do.norm = FALSE, do.its = TRUE))
plot(MSGARCH::pit(fit.bay1, do.norm = FALSE, do.its = TRUE))
plot(MSGARCH::pit(fit.bay2, do.norm = FALSE, do.its = TRUE))
pit.mle1 = MSGARCH::pit(fit.mle1, do.norm = TRUE, do.its = TRUE)
pit.mle2 = MSGARCH::pit(fit.mle2, do.norm = TRUE, do.its = TRUE)
pit.bay1 = MSGARCH::pit(fit.bay1, do.norm = TRUE, do.its = TRUE)
pit.bay2 = MSGARCH::pit(fit.bay2, do.norm = TRUE, do.its = TRUE)
l.pit = length(pit.mle1$pit)
Decision = NULL
Decision[1] = rugarch::BerkowitzTest(data = pit.mle1$pit[2:l.pit],
significance = 0.05)$Decision
Decision[2] = rugarch::BerkowitzTest(data = pit.mle2$pit[2:l.pit],
significance = 0.05)$Decision
Decision[3] = rugarch::BerkowitzTest(data = pit.bay1$pit[2:l.pit],
significance = 0.05)$Decision
Decision[4] = rugarch::BerkowitzTest(data = pit.bay2$pit[2:l.pit],
significance = 0.05)$Decision
Decision
save.image(file = "vignette.RData")
risk.mle1 = MSGARCH::risk(fit.mle1, level = c(0.95), ES = FALSE, do.its = TRUE)
risk.mle2 = MSGARCH::risk(fit.mle2, level = c(0.95), ES = FALSE, do.its = TRUE)
data("sp500")
spec = create.spec(model = c("sGARCH", "sGARCH"),
distribution = c("std", "std"),
do.skew = c(FALSE, FALSE),
do.mix = FALSE, do.shape.ind = FALSE)
set.seed(123)
ctr.mle = list(do.init = TRUE, NP = 50*length(spec$theta0), itermax = 500, enhance.theta0 = TRUE)
fit.mle = MSGARCH::fit.mle(spec = spec, y = sp500, ctr = ctr.mle)
summary(fit.mle)
data("sp500")
spec = create.spec(model = c("sGARCH", "sGARCH"),
distribution = c("std", "std"),
do.skew = c(FALSE, FALSE),
do.mix = FALSE, do.shape.ind = FALSE)
set.seed(123)
ctr.bay = list(N.burn = 5000, N.mcmc = 10000, N.thin = 10, enhance.theta0 = TRUE)
fit.bay = MSGARCH::fit.bayes(spec = spec, y = sp500, ctr = ctr.bay)
summary(fit.bay)
options(digits = 4, max.print = 40, prompt = "R> ")
summary(fit.mle1)
summary(fit.mle2)
getOption("widht")
getOption("width")
options(digits = 4, max.print = 40, prompt = "R> ")
print("awdasddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd")
print("awdasdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddsaddddddddddddddddddddddddddd")
options(digits = 4, max.print = 40, prompt = "R> ", max.width = 40)
summary(fit.mle2)
options(digits = 4, max.print = 40, prompt = "R> ", width = 40)
summary(fit.mle2)
options(digits = 4, max.print = 40, prompt = "R> ", width = 80)
summary(fit.mle2)
options(digits = 4, max.print = 40, prompt = "R> ", width = 50)
summary(fit.mle2)
options(digits = 1, max.print = 40, prompt = "R> ", width = 50)
summary(fit.mle2)
options(digits = 3, max.print = 40, prompt = "R> ", width = 50)
options(digits = 4, max.print = 40, prompt = "R> ", width = 50)
summary(fit.mle2)
summary(fit.mle1)
summary(fit.bay1)
summary(fit.bay2)
